{"version":3,"file":"static/js/Cast.5a24f2e5.chunk.js","mappings":"oOAwBA,MApBA,WACC,IAAMA,ECDqB,WAC1B,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOD,EAAP,KAAeE,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAyBV,OAvBEE,EAAAA,EAAAA,YAAU,WACRC,MAAM,sCAAD,OACmCH,EADnC,qEAGFI,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OACb,IAAIC,MAAJ,kMAGHN,MAAK,SAAAC,GACJ,IAAMM,EAAON,EAASO,KAAKC,KAAI,kBAA4C,CACzEC,aAD6B,EAAGA,aAEhCC,GAF6B,EAAiBA,GAG9CC,UAH6B,EAAqBA,UAIlDC,KAJ6B,EAAgCA,SAM/DlB,GAAU,yBAAUY,WAEvB,CAACX,IAECH,ED1BSqB,GAEd,OACE,0BACE,wBACGrB,GACCA,EAAOgB,KAAI,gBAAEE,EAAF,EAAEA,GAAIE,EAAN,EAAMA,KAAMH,EAAZ,EAAYA,aAAcE,EAA1B,EAA0BA,UAA1B,OACT,2BACE,gBAAKG,IAAG,yCAAoCL,GAAgBM,MAAM,QAAQC,IAAI,WAC9E,uBAAIJ,KACJ,uCAAeD,OAHRD,Y,8EERN,SAASO,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,GFInF,CAAgBJ,KAAQ,EAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE","sources":["pages/Cast/Cast.jsx","hooks/useFetchCast.jsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import React from 'react';\nimport {useFetchCast} from '../../hooks/useFetchCast'\n\n\nfunction Cast() {\n const actors = useFetchCast()\n \n  return (\n    <div>\n      <ul>\n        {actors &&\n          actors.map(({id, name, profile_path, character}) => (\n            <li key={id}>\n              <img src={`https://image.tmdb.org/t/p/w400${profile_path}`} width='100px' alt=\"Actor\" />\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n}\n\n\nexport default Cast;\n","import  { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\n\nexport const useFetchCast = ()=>{\n  const [actors, setActors] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=a4a29fffc470fecd93a30cf31010c680&language=en-US`\n    )\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        return Promise.reject(\n          new Error(`По Вашому запиту нічого не знайдено!`)\n        );\n      })\n      .then(response => {\n        const hits = response.cast.map(({ profile_path, id, character, name }) => ({\n          profile_path,\n          id,\n          character,\n          name\n        }));\n        setActors(() => [...hits]);\n      });\n  }, [movieId]);\n\nreturn actors;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["actors","useState","setActors","movieId","useParams","useEffect","fetch","then","response","ok","json","Promise","reject","Error","hits","cast","map","profile_path","id","character","name","useFetchCast","src","width","alt","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}